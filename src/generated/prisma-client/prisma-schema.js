module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateClass {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateSubject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Class {
  id: ID!
  label: String!
  description: String!
  illustration: String!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject!]
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
}

type ClassConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  id: ID
  label: String!
  description: String!
  illustration: String!
  courses: CourseCreateManyWithoutLevelInput
  subjects: SubjectCreateManyWithoutLevelInput
  students: UserCreateManyWithoutLevelInput
}

input ClassCreateOneWithoutCoursesInput {
  create: ClassCreateWithoutCoursesInput
  connect: ClassWhereUniqueInput
}

input ClassCreateOneWithoutStudentsInput {
  create: ClassCreateWithoutStudentsInput
  connect: ClassWhereUniqueInput
}

input ClassCreateOneWithoutSubjectsInput {
  create: ClassCreateWithoutSubjectsInput
  connect: ClassWhereUniqueInput
}

input ClassCreateWithoutCoursesInput {
  id: ID
  label: String!
  description: String!
  illustration: String!
  subjects: SubjectCreateManyWithoutLevelInput
  students: UserCreateManyWithoutLevelInput
}

input ClassCreateWithoutStudentsInput {
  id: ID
  label: String!
  description: String!
  illustration: String!
  courses: CourseCreateManyWithoutLevelInput
  subjects: SubjectCreateManyWithoutLevelInput
}

input ClassCreateWithoutSubjectsInput {
  id: ID
  label: String!
  description: String!
  illustration: String!
  courses: CourseCreateManyWithoutLevelInput
  students: UserCreateManyWithoutLevelInput
}

type ClassEdge {
  node: Class!
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  description_ASC
  description_DESC
  illustration_ASC
  illustration_DESC
  createdAt_ASC
  createdAt_DESC
}

type ClassPreviousValues {
  id: ID!
  label: String!
  description: String!
  illustration: String!
  createdAt: DateTime!
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
  AND: [ClassSubscriptionWhereInput!]
  OR: [ClassSubscriptionWhereInput!]
  NOT: [ClassSubscriptionWhereInput!]
}

input ClassUpdateInput {
  label: String
  description: String
  illustration: String
  courses: CourseUpdateManyWithoutLevelInput
  subjects: SubjectUpdateManyWithoutLevelInput
  students: UserUpdateManyWithoutLevelInput
}

input ClassUpdateManyMutationInput {
  label: String
  description: String
  illustration: String
}

input ClassUpdateOneRequiredWithoutStudentsInput {
  create: ClassCreateWithoutStudentsInput
  update: ClassUpdateWithoutStudentsDataInput
  upsert: ClassUpsertWithoutStudentsInput
  connect: ClassWhereUniqueInput
}

input ClassUpdateOneWithoutCoursesInput {
  create: ClassCreateWithoutCoursesInput
  update: ClassUpdateWithoutCoursesDataInput
  upsert: ClassUpsertWithoutCoursesInput
  delete: Boolean
  disconnect: Boolean
  connect: ClassWhereUniqueInput
}

input ClassUpdateOneWithoutSubjectsInput {
  create: ClassCreateWithoutSubjectsInput
  update: ClassUpdateWithoutSubjectsDataInput
  upsert: ClassUpsertWithoutSubjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: ClassWhereUniqueInput
}

input ClassUpdateWithoutCoursesDataInput {
  label: String
  description: String
  illustration: String
  subjects: SubjectUpdateManyWithoutLevelInput
  students: UserUpdateManyWithoutLevelInput
}

input ClassUpdateWithoutStudentsDataInput {
  label: String
  description: String
  illustration: String
  courses: CourseUpdateManyWithoutLevelInput
  subjects: SubjectUpdateManyWithoutLevelInput
}

input ClassUpdateWithoutSubjectsDataInput {
  label: String
  description: String
  illustration: String
  courses: CourseUpdateManyWithoutLevelInput
  students: UserUpdateManyWithoutLevelInput
}

input ClassUpsertWithoutCoursesInput {
  update: ClassUpdateWithoutCoursesDataInput!
  create: ClassCreateWithoutCoursesInput!
}

input ClassUpsertWithoutStudentsInput {
  update: ClassUpdateWithoutStudentsDataInput!
  create: ClassCreateWithoutStudentsInput!
}

input ClassUpsertWithoutSubjectsInput {
  update: ClassUpdateWithoutSubjectsDataInput!
  create: ClassCreateWithoutSubjectsInput!
}

input ClassWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
  subjects_every: SubjectWhereInput
  subjects_some: SubjectWhereInput
  subjects_none: SubjectWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
}

input ClassWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  content: String!
  author: User!
  createdAt: DateTime!
  onCourse: Course!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  content: String!
  author: UserCreateOneWithoutCommentsInput!
  onCourse: CourseCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutOnCourseInput {
  create: [CommentCreateWithoutOnCourseInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  id: ID
  content: String!
  onCourse: CourseCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutOnCourseInput {
  id: ID
  content: String!
  author: UserCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  content: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  onCourse: CourseUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  content: String
}

input CommentUpdateManyMutationInput {
  content: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutOnCourseInput {
  create: [CommentCreateWithoutOnCourseInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOnCourseInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOnCourseInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutAuthorDataInput {
  content: String
  onCourse: CourseUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutOnCourseDataInput {
  content: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutOnCourseInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutOnCourseDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutOnCourseInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutOnCourseDataInput!
  create: CommentCreateWithoutOnCourseInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  onCourse: CourseWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  chapterNumber: Int!
  title: String!
  description: String!
  illustration: String!
  pdfLink: String
  videoLink: String
  level: Class
  createdAt: DateTime!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: ID
  chapterNumber: Int!
  title: String!
  description: String!
  illustration: String!
  pdfLink: String
  videoLink: String
  level: ClassCreateOneWithoutCoursesInput
  comments: CommentCreateManyWithoutOnCourseInput
}

input CourseCreateManyWithoutLevelInput {
  create: [CourseCreateWithoutLevelInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutCommentsInput {
  create: CourseCreateWithoutCommentsInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutCommentsInput {
  id: ID
  chapterNumber: Int!
  title: String!
  description: String!
  illustration: String!
  pdfLink: String
  videoLink: String
  level: ClassCreateOneWithoutCoursesInput
}

input CourseCreateWithoutLevelInput {
  id: ID
  chapterNumber: Int!
  title: String!
  description: String!
  illustration: String!
  pdfLink: String
  videoLink: String
  comments: CommentCreateManyWithoutOnCourseInput
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  chapterNumber_ASC
  chapterNumber_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  illustration_ASC
  illustration_DESC
  pdfLink_ASC
  pdfLink_DESC
  videoLink_ASC
  videoLink_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoursePreviousValues {
  id: ID!
  chapterNumber: Int!
  title: String!
  description: String!
  illustration: String!
  pdfLink: String
  videoLink: String
  createdAt: DateTime!
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chapterNumber: Int
  chapterNumber_not: Int
  chapterNumber_in: [Int!]
  chapterNumber_not_in: [Int!]
  chapterNumber_lt: Int
  chapterNumber_lte: Int
  chapterNumber_gt: Int
  chapterNumber_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  pdfLink: String
  pdfLink_not: String
  pdfLink_in: [String!]
  pdfLink_not_in: [String!]
  pdfLink_lt: String
  pdfLink_lte: String
  pdfLink_gt: String
  pdfLink_gte: String
  pdfLink_contains: String
  pdfLink_not_contains: String
  pdfLink_starts_with: String
  pdfLink_not_starts_with: String
  pdfLink_ends_with: String
  pdfLink_not_ends_with: String
  videoLink: String
  videoLink_not: String
  videoLink_in: [String!]
  videoLink_not_in: [String!]
  videoLink_lt: String
  videoLink_lte: String
  videoLink_gt: String
  videoLink_gte: String
  videoLink_contains: String
  videoLink_not_contains: String
  videoLink_starts_with: String
  videoLink_not_starts_with: String
  videoLink_ends_with: String
  videoLink_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateInput {
  chapterNumber: Int
  title: String
  description: String
  illustration: String
  pdfLink: String
  videoLink: String
  level: ClassUpdateOneWithoutCoursesInput
  comments: CommentUpdateManyWithoutOnCourseInput
}

input CourseUpdateManyDataInput {
  chapterNumber: Int
  title: String
  description: String
  illustration: String
  pdfLink: String
  videoLink: String
}

input CourseUpdateManyMutationInput {
  chapterNumber: Int
  title: String
  description: String
  illustration: String
  pdfLink: String
  videoLink: String
}

input CourseUpdateManyWithoutLevelInput {
  create: [CourseCreateWithoutLevelInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutLevelInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutLevelInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateOneRequiredWithoutCommentsInput {
  create: CourseCreateWithoutCommentsInput
  update: CourseUpdateWithoutCommentsDataInput
  upsert: CourseUpsertWithoutCommentsInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateWithoutCommentsDataInput {
  chapterNumber: Int
  title: String
  description: String
  illustration: String
  pdfLink: String
  videoLink: String
  level: ClassUpdateOneWithoutCoursesInput
}

input CourseUpdateWithoutLevelDataInput {
  chapterNumber: Int
  title: String
  description: String
  illustration: String
  pdfLink: String
  videoLink: String
  comments: CommentUpdateManyWithoutOnCourseInput
}

input CourseUpdateWithWhereUniqueWithoutLevelInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutLevelDataInput!
}

input CourseUpsertWithoutCommentsInput {
  update: CourseUpdateWithoutCommentsDataInput!
  create: CourseCreateWithoutCommentsInput!
}

input CourseUpsertWithWhereUniqueWithoutLevelInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutLevelDataInput!
  create: CourseCreateWithoutLevelInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  chapterNumber: Int
  chapterNumber_not: Int
  chapterNumber_in: [Int!]
  chapterNumber_not_in: [Int!]
  chapterNumber_lt: Int
  chapterNumber_lte: Int
  chapterNumber_gt: Int
  chapterNumber_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  pdfLink: String
  pdfLink_not: String
  pdfLink_in: [String!]
  pdfLink_not_in: [String!]
  pdfLink_lt: String
  pdfLink_lte: String
  pdfLink_gt: String
  pdfLink_gte: String
  pdfLink_contains: String
  pdfLink_not_contains: String
  pdfLink_starts_with: String
  pdfLink_not_starts_with: String
  pdfLink_ends_with: String
  pdfLink_not_ends_with: String
  videoLink: String
  videoLink_not: String
  videoLink_in: [String!]
  videoLink_not_in: [String!]
  videoLink_lt: String
  videoLink_lte: String
  videoLink_gt: String
  videoLink_gte: String
  videoLink_contains: String
  videoLink_not_contains: String
  videoLink_starts_with: String
  videoLink_not_starts_with: String
  videoLink_ends_with: String
  videoLink_not_ends_with: String
  level: ClassWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createClass(data: ClassCreateInput!): Class!
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  updateManyClasses(data: ClassUpdateManyMutationInput!, where: ClassWhereInput): BatchPayload!
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createSubject(data: SubjectCreateInput!): Subject!
  updateSubject(data: SubjectUpdateInput!, where: SubjectWhereUniqueInput!): Subject
  updateManySubjects(data: SubjectUpdateManyMutationInput!, where: SubjectWhereInput): BatchPayload!
  upsertSubject(where: SubjectWhereUniqueInput!, create: SubjectCreateInput!, update: SubjectUpdateInput!): Subject!
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteManySubjects(where: SubjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  class(where: ClassWhereUniqueInput!): Class
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  subject(where: SubjectWhereUniqueInput!): Subject
  subjects(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subject]!
  subjectsConnection(where: SubjectWhereInput, orderBy: SubjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subject {
  id: ID!
  title: String!
  description: String!
  illustration: String!
  td: String!
  correction: String
  level: Class
}

type SubjectConnection {
  pageInfo: PageInfo!
  edges: [SubjectEdge]!
  aggregate: AggregateSubject!
}

input SubjectCreateInput {
  id: ID
  title: String!
  description: String!
  illustration: String!
  td: String!
  correction: String
  level: ClassCreateOneWithoutSubjectsInput
}

input SubjectCreateManyWithoutLevelInput {
  create: [SubjectCreateWithoutLevelInput!]
  connect: [SubjectWhereUniqueInput!]
}

input SubjectCreateWithoutLevelInput {
  id: ID
  title: String!
  description: String!
  illustration: String!
  td: String!
  correction: String
}

type SubjectEdge {
  node: Subject!
  cursor: String!
}

enum SubjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  illustration_ASC
  illustration_DESC
  td_ASC
  td_DESC
  correction_ASC
  correction_DESC
}

type SubjectPreviousValues {
  id: ID!
  title: String!
  description: String!
  illustration: String!
  td: String!
  correction: String
}

input SubjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  td: String
  td_not: String
  td_in: [String!]
  td_not_in: [String!]
  td_lt: String
  td_lte: String
  td_gt: String
  td_gte: String
  td_contains: String
  td_not_contains: String
  td_starts_with: String
  td_not_starts_with: String
  td_ends_with: String
  td_not_ends_with: String
  correction: String
  correction_not: String
  correction_in: [String!]
  correction_not_in: [String!]
  correction_lt: String
  correction_lte: String
  correction_gt: String
  correction_gte: String
  correction_contains: String
  correction_not_contains: String
  correction_starts_with: String
  correction_not_starts_with: String
  correction_ends_with: String
  correction_not_ends_with: String
  AND: [SubjectScalarWhereInput!]
  OR: [SubjectScalarWhereInput!]
  NOT: [SubjectScalarWhereInput!]
}

type SubjectSubscriptionPayload {
  mutation: MutationType!
  node: Subject
  updatedFields: [String!]
  previousValues: SubjectPreviousValues
}

input SubjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubjectWhereInput
  AND: [SubjectSubscriptionWhereInput!]
  OR: [SubjectSubscriptionWhereInput!]
  NOT: [SubjectSubscriptionWhereInput!]
}

input SubjectUpdateInput {
  title: String
  description: String
  illustration: String
  td: String
  correction: String
  level: ClassUpdateOneWithoutSubjectsInput
}

input SubjectUpdateManyDataInput {
  title: String
  description: String
  illustration: String
  td: String
  correction: String
}

input SubjectUpdateManyMutationInput {
  title: String
  description: String
  illustration: String
  td: String
  correction: String
}

input SubjectUpdateManyWithoutLevelInput {
  create: [SubjectCreateWithoutLevelInput!]
  delete: [SubjectWhereUniqueInput!]
  connect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  disconnect: [SubjectWhereUniqueInput!]
  update: [SubjectUpdateWithWhereUniqueWithoutLevelInput!]
  upsert: [SubjectUpsertWithWhereUniqueWithoutLevelInput!]
  deleteMany: [SubjectScalarWhereInput!]
  updateMany: [SubjectUpdateManyWithWhereNestedInput!]
}

input SubjectUpdateManyWithWhereNestedInput {
  where: SubjectScalarWhereInput!
  data: SubjectUpdateManyDataInput!
}

input SubjectUpdateWithoutLevelDataInput {
  title: String
  description: String
  illustration: String
  td: String
  correction: String
}

input SubjectUpdateWithWhereUniqueWithoutLevelInput {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateWithoutLevelDataInput!
}

input SubjectUpsertWithWhereUniqueWithoutLevelInput {
  where: SubjectWhereUniqueInput!
  update: SubjectUpdateWithoutLevelDataInput!
  create: SubjectCreateWithoutLevelInput!
}

input SubjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  illustration: String
  illustration_not: String
  illustration_in: [String!]
  illustration_not_in: [String!]
  illustration_lt: String
  illustration_lte: String
  illustration_gt: String
  illustration_gte: String
  illustration_contains: String
  illustration_not_contains: String
  illustration_starts_with: String
  illustration_not_starts_with: String
  illustration_ends_with: String
  illustration_not_ends_with: String
  td: String
  td_not: String
  td_in: [String!]
  td_not_in: [String!]
  td_lt: String
  td_lte: String
  td_gt: String
  td_gte: String
  td_contains: String
  td_not_contains: String
  td_starts_with: String
  td_not_starts_with: String
  td_ends_with: String
  td_not_ends_with: String
  correction: String
  correction_not: String
  correction_in: [String!]
  correction_not_in: [String!]
  correction_lt: String
  correction_lte: String
  correction_gt: String
  correction_gte: String
  correction_contains: String
  correction_not_contains: String
  correction_starts_with: String
  correction_not_starts_with: String
  correction_ends_with: String
  correction_not_ends_with: String
  level: ClassWhereInput
  AND: [SubjectWhereInput!]
  OR: [SubjectWhereInput!]
  NOT: [SubjectWhereInput!]
}

input SubjectWhereUniqueInput {
  id: ID
}

type Subscription {
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  subject(where: SubjectSubscriptionWhereInput): SubjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  phone: String!
  level: Class!
  password: String!
  createdAt: DateTime!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  phone: String!
  level: ClassCreateOneWithoutStudentsInput!
  password: String!
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutLevelInput {
  create: [UserCreateWithoutLevelInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  email: String!
  phone: String!
  level: ClassCreateOneWithoutStudentsInput!
  password: String!
}

input UserCreateWithoutLevelInput {
  id: ID
  name: String!
  email: String!
  phone: String!
  password: String!
  comments: CommentCreateManyWithoutAuthorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  phone: String!
  password: String!
  createdAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  phone: String
  level: ClassUpdateOneRequiredWithoutStudentsInput
  password: String
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  phone: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  phone: String
  password: String
}

input UserUpdateManyWithoutLevelInput {
  create: [UserCreateWithoutLevelInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLevelInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLevelInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  phone: String
  level: ClassUpdateOneRequiredWithoutStudentsInput
  password: String
}

input UserUpdateWithoutLevelDataInput {
  name: String
  email: String
  phone: String
  password: String
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutLevelInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLevelDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithWhereUniqueWithoutLevelInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLevelDataInput!
  create: UserCreateWithoutLevelInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  level: ClassWhereInput
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}
`
      }
    